// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/todo_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	repository "main/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoUsecase is a mock of ITodoUsecase interface.
type MockITodoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockITodoUsecaseMockRecorder
}

// MockITodoUsecaseMockRecorder is the mock recorder for MockITodoUsecase.
type MockITodoUsecaseMockRecorder struct {
	mock *MockITodoUsecase
}

// NewMockITodoUsecase creates a new mock instance.
func NewMockITodoUsecase(ctrl *gomock.Controller) *MockITodoUsecase {
	mock := &MockITodoUsecase{ctrl: ctrl}
	mock.recorder = &MockITodoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoUsecase) EXPECT() *MockITodoUsecaseMockRecorder {
	return m.recorder
}

// GetAllTodo mocks base method.
func (m *MockITodoUsecase) GetAllTodo() ([]repository.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodo")
	ret0, _ := ret[0].([]repository.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodo indicates an expected call of GetAllTodo.
func (mr *MockITodoUsecaseMockRecorder) GetAllTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodo", reflect.TypeOf((*MockITodoUsecase)(nil).GetAllTodo))
}
