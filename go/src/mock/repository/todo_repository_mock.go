// Code generated by MockGen. DO NOT EDIT.
// Source: repository/todo_repository.go
// go:generate mockgen -source=repository/todo_repository.go -destination=./mock/repository/todo_repository_mock.go -package=mock

// Package mock is a generated GoMock package.
package mock

import (
	entity "main/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockITodoRepository) CreateTodo(arg0 map[string]string) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockITodoRepositoryMockRecorder) CreateTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockITodoRepository)(nil).CreateTodo), arg0)
}

// DeleteTodoById mocks base method.
func (m *MockITodoRepository) DeleteTodoById(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodoById indicates an expected call of DeleteTodoById.
func (mr *MockITodoRepositoryMockRecorder) DeleteTodoById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoById", reflect.TypeOf((*MockITodoRepository)(nil).DeleteTodoById), arg0)
}

// GetAllTodo mocks base method.
func (m *MockITodoRepository) GetAllTodo() ([]entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodo")
	ret0, _ := ret[0].([]entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodo indicates an expected call of GetAllTodo.
func (mr *MockITodoRepositoryMockRecorder) GetAllTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodo", reflect.TypeOf((*MockITodoRepository)(nil).GetAllTodo))
}

// GetTodoById mocks base method.
func (m *MockITodoRepository) GetTodoById(arg0 string) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoById", arg0)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoById indicates an expected call of GetTodoById.
func (mr *MockITodoRepositoryMockRecorder) GetTodoById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoById", reflect.TypeOf((*MockITodoRepository)(nil).GetTodoById), arg0)
}

// UpdateTodoById mocks base method.
func (m *MockITodoRepository) UpdateTodoById(arg0 string, arg1 map[string]string) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoById", arg0, arg1)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodoById indicates an expected call of UpdateTodoById.
func (mr *MockITodoRepositoryMockRecorder) UpdateTodoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoById", reflect.TypeOf((*MockITodoRepository)(nil).UpdateTodoById), arg0, arg1)
}
